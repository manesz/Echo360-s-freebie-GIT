<#@ template language="C#" HostSpecific="True"  inherits="DynamicTransform" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Text" #>
<#@ assembly name="System.Security" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ include file="CommonFunctions.cs.t4" #>
<#@ Output Extension="cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a T4 template using Scaffolder PocoFromDB
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//	   Generated by: <#= Model.User #>
//	   Date Created: <#= DateTime.Today.ToString("yyyy-MM-dd") #>
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Linq.Expressions;
using <#= Model.Namespace #>.Models;

namespace <#= Model.Namespace #>.Repositories
{ 
<# 
	var modelType = (CodeType)Model.ModelType; 
	var modelName = modelType.Name; 
	var modelNamePlural = Model.ModelTypePluralized; 
	var contextName = ((CodeType)Model.DbContextType).Name; 
	var primaryKeys = Model.TableSchema.PrimaryKey;
	var modelNameWithEntity = modelName.ToLower().Replace("entity", ""); 
#>
	public class <#= modelName #>Repository : I<#= modelName #>Repository
	{
		readonly <#= contextName #> context = new <#= contextName #>();

		public IQueryable<<#= modelName #>> All
		{
			get { return context.<#= modelNamePlural #>; }
		}

		public IQueryable<<#= modelName #>> AllIncluding(params Expression<Func<<#= modelName #>, object>>[] includeProperties)
		{
			IQueryable<<#= modelName #>> query = context.<#= modelNamePlural #>;
			foreach (var includeProperty in includeProperties) {
				query = query.Include(includeProperty);
			}
			return query;
		}
<# if (primaryKeys != null && primaryKeys.Length > 0) { #>
		
		public <#= modelName #> Find(<# for(var i = 0; i <  primaryKeys.Length ; i++){ var c = primaryKeys[i];#><#= i > 0 ? ", " : "" #><#= GetStringType(c) #> <#= ToCamelCase(PropertyNameRules(c.ColumnName)) #><#}#>)
		{
			return context.<#= modelNamePlural #>.Find(<# for(var i = 0; i <  primaryKeys.Length ; i++){ var c = primaryKeys[i];#><#= i > 0 ? ", " : "" #><#= ToCamelCase(PropertyNameRules(c.ColumnName)) #><#}#>);
		}

		public void InsertOrUpdate(<#= modelName #> <#= modelNameWithEntity #>)
        {
			if (<# for(var i = 0; i <  primaryKeys.Length ; i++){ var c = primaryKeys[i]; #><#= i > 0 ? " || " : "" #><#= modelNameWithEntity #>.<#= PropertyNameRules(c.ColumnName) #> == default(<#= GetStringType(c) #>)<# } #>)
			{
				context.<#= modelNamePlural #>.Add(<#= modelNameWithEntity #>);
			}
			else 
			{
				context.<#= modelNamePlural #>.Attach(<#= modelNameWithEntity #>);
				context.Entry(<#= modelNameWithEntity #>).State = EntityState.Modified;
			}
		}

		public void Delete(<# for(var i = 0; i <  primaryKeys.Length ; i++){ var c = primaryKeys[i];#><#= i > 0 ? ", " : "" #><#= GetStringType(c) #> <#= PropertyNameRules(c.ColumnName) #><#}#>)
        {
            var <#= modelName.ToLower() #> = context.<#= modelNamePlural #>.Find(<# for(var i = 0; i <  primaryKeys.Length ; i++){ var c = primaryKeys[i];#><#= i > 0 ? ", " : "" #><#= PropertyNameRules(c.ColumnName) #><#}#>);;
            context.<#= modelNamePlural #>.Remove(<#= modelName.ToLower() #>);
        }
<# } #>

		public void Save()
		{
			context.SaveChanges();
		}

		public void Dispose() 
		{
			context.Dispose();
		}
	}

	public interface I<#= modelName #>Repository : IDisposable
	{
		IQueryable<<#= modelName #>> All { get; }
		IQueryable<<#= modelName #>> AllIncluding(params Expression<Func<<#= modelName #>, object>>[] includeProperties);
<# if (primaryKeys != null && primaryKeys.Length > 0) { #>
		<#= modelName #> Find(<# for(var i = 0; i <  primaryKeys.Length ; i++){ var c = primaryKeys[i];#><#= i > 0 ? ", " : "" #><#= GetStringType(c) #> <#= PropertyNameRules(c.ColumnName) #><#}#>);
		void InsertOrUpdate(<#= modelName #> <#= modelNameWithEntity #>);
		void Delete(<# for(var i = 0; i <  primaryKeys.Length ; i++){ var c = primaryKeys[i];#><#= i > 0 ? ", " : "" #><#= GetStringType(c) #> <#= PropertyNameRules(c.ColumnName) #><#}#>);
<# } #>
	}


}
