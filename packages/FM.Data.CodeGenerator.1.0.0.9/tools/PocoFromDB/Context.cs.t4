<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output Extension="cs" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Text" #>

<#@ import namespace="System.Data" #>
<#@ import namespace="System.Text.RegularExpressions" #>

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a T4 template using Scaffolder PocoFromDB
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//	   Generated by: <#= Model.User #> 
//	   Date Created: <#= DateTime.Today.ToString("yyyy-MM-dd") #>
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity;
using <#= Model.Namespace #>.Models;
using <#= Model.Namespace #>.Mappings;
using FM.Data;

namespace <#= Model.Namespace #>
{ 
	public class <#= Model.ContextName #> : DbContextEx
    {
		static <#= Model.ContextName #>()
        {
            //-- Disable EF Initializer
            Database.SetInitializer<<#= Model.ContextName #>>(null);
        }
	}
}

<#+ 
	string GetStringType(DataColumn col)
    {
		var addNullable = col.DataType.ToString() != "System.String" && col.AllowDBNull;
    	return col.DataType.ToString().Replace("System.","") + (addNullable ? "?" : "");
   	}

	string PropertyNameRules(string columnName, string entityName = "")
	{
		var propertyName = columnName.ToLower();
		
		if (!String.IsNullOrEmpty(entityName)) 
			propertyName = propertyName.Replace(entityName.ToLower(), "");


		propertyName = propertyName.Replace("__","_");
		propertyName = ReplaceKeyword(propertyName, "dept","department");
		propertyName = ReplaceKeyword(propertyName, "de","description");
		propertyName = ReplaceKeyword(propertyName, "fl","flag");
		propertyName = ReplaceKeyword(propertyName, "nm","name");
		propertyName = ReplaceKeyword(propertyName, "dt","date");
		propertyName = ReplaceKeyword(propertyName, "nr","number");
		propertyName = ReplaceKeyword(propertyName, "cd","code");
		propertyName = ReplaceKeyword(propertyName, "fac","facility");
		propertyName = ReplaceKeyword(propertyName, "usr","user");


		propertyName = Regex.Replace(propertyName, @"(?:^|_)([a-z])", m => m.Groups[1].Value.ToUpper());
		return propertyName;
	}

	string ReplaceKeyword(string value, string keyword, string replaceWith)
	{
        if (value.Contains("_" + keyword + "_"))
            value = value.Replace("_" + keyword + "_", "_" + replaceWith + "_");

        if (value.EndsWith("_"+keyword))
            value = value.Substring(0, value.Length-keyword.Length) + replaceWith;

        if (value.StartsWith(keyword + "_"))
            value = replaceWith + value.Substring(keyword.Length);

        return value;
	}

	string EntityNameRule(string tableName)
	{
		return tableName.Replace("RbT", "")
			.Replace("RbD", "")
			.Replace("item","Item");
	}	
	
	string PascalName(string name)
	{
		return Regex.Replace(name.ToLower() , @"(?:^|_)([a-z])", m => m.Groups[1].Value.ToUpper());
	}
	
	
  	


#>